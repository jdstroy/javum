# Top level makefile fragment for GNU C++.
#   Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#
# Extra flags to pass to recursive makes.
CXX_FLAGS_TO_PASS = \
	"CXX_FOR_BUILD=$(CXX_FOR_BUILD)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"

# Actual names to use when installing a native compiler.
CXX_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`
GXX_INSTALL_NAME = `t='$(program_transform_name)'; echo g++ | sed $$t`
DEMANGLER_INSTALL_NAME = `t='$(program_transform_name)'; echo c++filt | sed $$t`

# Actual names to use when installing a cross-compiler.
CXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`
GXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g++ | sed $$t`
DEMANGLER_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++filt | sed $$t`

# The name to use for the demangler program.
DEMANGLER_PROG = c++filt$(exeext)

# Extra headers to install.
CXX_EXTRA_HEADERS = $(srcdir)/cp/inc/typeinfo $(srcdir)/cp/inc/exception \
	$(srcdir)/cp/inc/new $(srcdir)/cp/inc/new.h

# Extra code to include in libgcc2.
CXX_LIB2FUNCS = tinfo.o tinfo2.o new.o opnew.o opnewnt.o opvnew.o opvnewnt.o \
	opdel.o opdelnt.o opvdel.o opvdelnt.o exception.o
CXX_LIB2SRCS = $(srcdir)/cp/new.cc $(srcdir)/cp/new1.cc $(srcdir)/cp/new2.cc \
	$(srcdir)/cp/exception.cc $(srcdir)/cp/tinfo.cc \
	$(srcdir)/cp/tinfo2.cc $(srcdir)/cp/tinfo.h
#
# Define the names for selecting c++ in LANGUAGES.
# Note that it would be nice to move the dependency on g++
# into the C++ rule, but that needs a little bit of work
# to do the right thing within all.cross.
C++ c++: cc1plus$(exeext)

# Tell GNU make to ignore these if they exist.
.PHONY: C++ c++

g++.c: $(srcdir)/gcc.c
	-rm -f $@
	$(LN_S) $(srcdir)/gcc.c $@

g++spec.o: $(srcdir)/cp/g++spec.c
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/cp/g++spec.c

# N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.
# It'd be nice if we could find an easier way to do this---rather than have
# to track changes to the toplevel gcc Makefile as well.
# We depend on g++.c last, to make it obvious where it came from.
g++.o: $(CONFIG_H) multilib.h config.status $(lang_specs_files) g++.c \
       system.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	$(DRIVER_DEFINES) \
	-DLANG_SPECIFIC_DRIVER \
  -c g++.c

# Create the compiler driver for g++.
g++$(exeext): g++.o g++spec.o version.o choose-temp.o pexecute.o prefix.o mkstemp.o $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ g++.o g++spec.o prefix.o \
	  version.o choose-temp.o pexecute.o mkstemp.o $(EXTRA_GCC_OBJS) $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
g++-cross$(exeext): g++$(exeext)
	-rm -f g++-cross$(exeext)
	cp g++$(exeext) g++-cross$(exeext)

cxxmain.o: cplus-dem.c demangle.h
	rm -f cxxmain.c
	$(LN_S) $(srcdir)/cplus-dem.c cxxmain.c
	$(CC) -c -DMAIN $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  -DVERSION=\"$(version)\" cxxmain.c

$(DEMANGLER_PROG): cxxmain.o underscore.o getopt.o getopt1.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(LIBS) -o $@ \
	  cxxmain.o underscore.o getopt.o getopt1.o

CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c \
 $(srcdir)/cp/except.c $(srcdir)/cp/input.c $(srcdir)/cp/pt.c \
 $(srcdir)/cp/spew.c $(srcdir)/cp/xref.c $(srcdir)/cp/class.c \
 $(srcdir)/cp/expr.c $(srcdir)/cp/lex.c \
 $(srcdir)/cp/ptree.c $(srcdir)/cp/tree.c $(srcdir)/cp/cvt.c \
 $(srcdir)/cp/errfn.c $(srcdir)/cp/rtti.c $(srcdir)/cp/method.c \
 $(srcdir)/cp/search.c $(srcdir)/cp/typeck.c $(srcdir)/cp/decl.c \
 $(srcdir)/cp/error.c $(srcdir)/cp/friend.c $(srcdir)/cp/init.c \
 $(srcdir)/cp/parse.y $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c \
 $(srcdir)/cp/repo.c $(srcdir)/cp/semantics.c

cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o c-pragma.o \
	$(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def
	cd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus$(exeext)
#
# Build hooks:

c++.all.build: g++$(exeext)
c++.all.cross: g++-cross$(exeext) $(DEMANGLER_PROG)
c++.start.encap: g++$(exeext)
c++.rest.encap: $(DEMANGLER_PROG)

c++.info:
c++.dvi:

# C++ language-support library pieces for libgcc.
tinfo.o: cc1plus$(exeext) $(srcdir)/cp/tinfo.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/tinfo.cc
tinfo2.o: cc1plus$(exeext) $(srcdir)/cp/tinfo2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/tinfo2.cc
exception.o: cc1plus$(exeext) $(srcdir)/cp/exception.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c -fexceptions $(srcdir)/cp/exception.cc
new.o: cc1plus$(exeext) $(srcdir)/cp/new.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new.cc
opnew.o: cc1plus$(exeext) $(srcdir)/cp/new1.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new1.cc -DL_op_new -o opnew.o
opnewnt.o: cc1plus$(exeext) $(srcdir)/cp/new1.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new1.cc -DL_op_newnt -o opnewnt.o
opvnew.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new2.cc -DL_op_vnew -o opvnew.o
opvnewnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new2.cc -DL_op_vnewnt -o opvnewnt.o
opdel.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new2.cc -DL_op_delete -o opdel.o
opdelnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new2.cc -DL_op_delnt -o opdelnt.o
opvdel.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new2.cc -DL_op_vdel -o opvdel.o
opvdelnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \
	  -c $(srcdir)/cp/new2.cc -DL_op_vdelnt -o opvdelnt.o

# We want to update cplib2.txt if any of the source files change...
cplib2.txt: $(CXX_LIB2SRCS) $(CXX_EXTRA_HEADERS) cplib2.ready
	case " $(LANGUAGES) " in \
	*" "[cC]"++ "*) \
	  echo $(CXX_LIB2FUNCS) > cplib2.new;; \
	*) \
	  echo "" > cplib2.new;; \
	esac
	mv -f cplib2.new cplib2.txt 

# Or if it would be different.
cplib2.ready: $(GCC_PASSES) $(LANGUAGES) $(LIBGCC2_DEPS) stmp-int-hdrs
	@if [ -r cplib2.txt ]; then \
	  case " $(LANGUAGES) " in \
	  *" "[cC]"++ "*) \
	    echo $(CXX_LIB2FUNCS) > cplib2.new;; \
	  *) \
	    echo "" > cplib2.new;; \
	  esac; \
	  if cmp -s cplib2.new cplib2.txt; then true; else \
	    touch cplib2.ready; \
	  fi; \
	  rm -f cplib2.new; \
	else true ; \
	fi
	@if [ -f cplib2.ready ]; then true; else \
	  touch cplib2.ready; \
	fi
#
# Install hooks:
# cc1plus is installed elsewhere as part of $(COMPILERS).

# Nothing to do here.
c++.install-normal:

# Install the driver program as $(target)-g++
# and also as either g++ (if native) or $(tooldir)/bin/g++.
c++.install-common:
	-if [ -f cc1plus$(exeext) ] ; then \
	  if [ -f g++-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(GXX_CROSS_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g++-cross$(exeext) $(bindir)/$(GXX_CROSS_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(GXX_CROSS_NAME)$(exeext); \
	    rm -f $(bindir)/$(CXX_CROSS_NAME)$(exeext); \
	    $(LN) $(bindir)/$(GXX_CROSS_NAME)$(exeext) $(bindir)/$(CXX_CROSS_NAME)$(exeext); \
	  else \
	    rm -f $(bindir)/$(GXX_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g++$(exeext) $(bindir)/$(GXX_INSTALL_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(GXX_INSTALL_NAME)$(exeext); \
	    rm -f $(bindir)/$(CXX_INSTALL_NAME)$(exeext); \
	    $(LN) $(bindir)/$(GXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_INSTALL_NAME)$(exeext); \
	  fi ; \
	  if [ x$(DEMANGLER_PROG) != x ] && [ -x "$(DEMANGLER_PROG)" ]; then \
	    if [ -f g++-cross$(exeext) ] ; then \
	      rm -f $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \
	      $(INSTALL_PROGRAM) $(DEMANGLER_PROG) $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \
	      chmod a+x $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext); \
	    else \
	      rm -f $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \
	      $(INSTALL_PROGRAM) $(DEMANGLER_PROG) $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \
	      chmod a+x $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext); \
	    fi ; \
	  fi ; \
	fi

c++.install-info:

c++.install-man: $(srcdir)/cp/g++.1
	-if [ -f cc1plus$(exeext) ] ; then \
	  if [ -f g++-cross$(exeext) ] ; then \
	    rm -f $(mandir)/$(GXX_CROSS_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/$(GXX_CROSS_NAME)$(manext); \
	    chmod a-x $(mandir)/$(GXX_CROSS_NAME)$(manext); \
	  else \
	    rm -f $(mandir)/$(GXX_INSTALL_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/$(GXX_INSTALL_NAME)$(manext); \
	    chmod a-x $(mandir)/$(GXX_INSTALL_NAME)$(manext); \
	  fi; \
	else true; fi

c++.uninstall:
	-rm -rf $(bindir)/$(CXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(CXX_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/$(DEMANGLER_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(DEMANGLER_CROSS_NAME)$(exeext)
	-rm -rf $(mandir)/$(GXX_INSTALL_NAME)$(manext)
	-rm -rf $(mandir)/$(GXX_CROSS_NAME)$(manext)
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

c++.mostlyclean:
	-rm -f cp/*$(objext) $(DEMANGLER_PROG)
c++.clean:
	-rm -f cplib2.txt cplib2.ready
c++.distclean:
	-rm -f cp/config.status cp/Makefile
	-rm -f cp/parse.output
	-rm -f g++.c
c++.extraclean:
c++.maintainer-clean:
	-rm -f cp/parse.c cp/parse.h
#
# Stage hooks:
# The main makefile has already created stage?/cp.

c++.stage1: stage1-start
	-mv cp/*$(objext) stage1/cp
c++.stage2: stage2-start
	-mv cp/*$(objext) stage2/cp
c++.stage3: stage3-start
	-mv cp/*$(objext) stage3/cp
c++.stage4: stage4-start
	-mv cp/*$(objext) stage4/cp
#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
c++.distdir:
	mkdir tmp/cp
	mkdir tmp/cp/inc
	cd cp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h
	cd cp; \
	for file in *[0-9a-zA-Z+]; do \
	  $(LN) $$file ../tmp/cp; \
	done
	cd cp/inc; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../../tmp/cp/inc >/dev/null 2>&1 \
	   || cp $$file ../../tmp/cp/inc; \
	done
# Top level makefile fragment for GNU Fortran.           -*-makefile-*-
#   Copyright (C) 1995-1998 Free Software Foundation, Inc.

#This file is part of GNU Fortran.

#GNU Fortran is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU Fortran is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU Fortran; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#
# $(srcdir) must be set to the gcc/ source directory (not gcc/f/).
#
# Actual name to use when installing a native compiler.
G77_INSTALL_NAME = `t='$(program_transform_name)'; echo g77 | sed $$t`

# Actual name to use when installing a cross-compiler.
G77_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g77 | sed $$t`
#
# Define the names for selecting f77 in LANGUAGES.
# Note that it would be nice to move the dependency on g77
# into the F77 rule, but that needs a little bit of work
# to do the right thing within all.cross.
F77 f77: f771$(exeext)

# Tell GNU make to ignore these if they exist.
.PHONY: F77 f77 f77.all.build f77.all.cross \
  f77.start.encap f77.rest.encap f77.info f77.dvi \
  f77.install-normal \
  f77.install-common f77.install-info f77.install-man \
  f77.uninstall f77.mostlyclean f77.clean f77.distclean \
  f77.extraclean f77.maintainer-clean f77.distdir f77.rebuilt \
  f77.stage1 f77.stage2 f77.stage3 f77.stage4

g77.c: $(srcdir)/gcc.c
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 ]; then \
	  rm -f g77.c; \
	  $(LN_S) $(srcdir)/gcc.c g77.c; \
	else true; fi

g77spec.o: $(srcdir)/f/g77spec.c $(srcdir)/f/version.h
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 ]; then \
	  $(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/f/g77spec.c; \
	else true; fi

g77version.o: $(srcdir)/f/version.c
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 ]; then \
	  $(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -o g77version.o \
	    $(srcdir)/f/version.c; \
	else true; fi

# N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.
# It'd be nice if we could find an easier way to do this---rather than have
# to track changes to the toplevel gcc Makefile as well.
# We depend on g77.c last, to make it obvious where it came from.
g77.o: $(CONFIG_H) multilib.h config.status $(lang_specs_files) g77.c
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 ]; then \
	  $(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(DRIVER_DEFINES) \
	   -DLANG_SPECIFIC_DRIVER -c g77.c; \
	else true; fi

# Create the compiler driver for g77.
g77$(exeext): g77.o g77spec.o g77version.o version.o choose-temp.o pexecute.o prefix.o mkstemp.o \
  $(LIBDEPS) $(EXTRA_GCC_OBJS)
	if [ -f lang-f77 ]; then \
	  $(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ g77.o g77spec.o g77version.o \
	   version.o choose-temp.o pexecute.o prefix.o mkstemp.o $(EXTRA_GCC_OBJS) $(LIBS); \
	else true; fi

# Create a version of the g77 driver which calls the cross-compiler.
g77-cross$(exeext): g77$(exeext)
	if [ -f lang-f77 ]; then \
	  rm -f g77-cross$(exeext); \
	  cp g77$(exeext) g77-cross$(exeext); \
	else true; fi

F77_SRCS = \
 $(srcdir)/f/assert.j \
 $(srcdir)/f/bad.c \
 $(srcdir)/f/bad.def \
 $(srcdir)/f/bad.h \
 $(srcdir)/f/bit.c \
 $(srcdir)/f/bit.h \
 $(srcdir)/f/bld-op.def \
 $(srcdir)/f/bld.c \
 $(srcdir)/f/bld.h \
 $(srcdir)/f/com-rt.def \
 $(srcdir)/f/com.c \
 $(srcdir)/f/com.h \
 $(srcdir)/f/config.j \
 $(srcdir)/f/convert.j \
 $(srcdir)/f/data.c \
 $(srcdir)/f/data.h \
 $(srcdir)/f/equiv.c \
 $(srcdir)/f/equiv.h \
 $(srcdir)/f/expr.c \
 $(srcdir)/f/expr.h \
 $(srcdir)/f/fini.c \
 $(srcdir)/f/flags.j \
 $(srcdir)/f/glimits.j \
 $(srcdir)/f/global.c \
 $(srcdir)/f/global.h \
 $(srcdir)/f/hconfig.j \
 $(srcdir)/f/implic.c \
 $(srcdir)/f/implic.h \
 $(srcdir)/f/input.j \
 $(srcdir)/f/info-b.def \
 $(srcdir)/f/info-k.def \
 $(srcdir)/f/info-w.def \
 $(srcdir)/f/info.c \
 $(srcdir)/f/info.h \
 $(srcdir)/f/intrin.c \
 $(srcdir)/f/intrin.def \
 $(srcdir)/f/intrin.h \
 $(srcdir)/f/lab.c \
 $(srcdir)/f/lab.h \
 $(srcdir)/f/lex.c \
 $(srcdir)/f/lex.h \
 $(srcdir)/f/malloc.c \
 $(srcdir)/f/malloc.h \
 $(srcdir)/f/name.c \
 $(srcdir)/f/name.h \
 $(srcdir)/f/output.j \
 $(srcdir)/f/parse.c \
 $(srcdir)/f/proj.c \
 $(srcdir)/f/proj.h \
 $(srcdir)/f/rtl.j \
 $(srcdir)/f/src.c \
 $(srcdir)/f/src.h \
 $(srcdir)/f/st.c \
 $(srcdir)/f/st.h \
 $(srcdir)/f/sta.c \
 $(srcdir)/f/sta.h \
 $(srcdir)/f/stb.c \
 $(srcdir)/f/stb.h \
 $(srcdir)/f/stc.c \
 $(srcdir)/f/stc.h \
 $(srcdir)/f/std.c \
 $(srcdir)/f/std.h \
 $(srcdir)/f/ste.c \
 $(srcdir)/f/ste.h \
 $(srcdir)/f/storag.c \
 $(srcdir)/f/storag.h \
 $(srcdir)/f/stp.c \
 $(srcdir)/f/stp.h \
 $(srcdir)/f/str-1t.fin \
 $(srcdir)/f/str-2t.fin \
 $(srcdir)/f/str-fo.fin \
 $(srcdir)/f/str-io.fin \
 $(srcdir)/f/str-nq.fin \
 $(srcdir)/f/str-op.fin \
 $(srcdir)/f/str-ot.fin \
 $(srcdir)/f/str.c \
 $(srcdir)/f/str.h \
 $(srcdir)/f/sts.c \
 $(srcdir)/f/sts.h \
 $(srcdir)/f/stt.c \
 $(srcdir)/f/stt.h \
 $(srcdir)/f/stu.c \
 $(srcdir)/f/stu.h \
 $(srcdir)/f/stv.c \
 $(srcdir)/f/stv.h \
 $(srcdir)/f/stw.c \
 $(srcdir)/f/stw.h \
 $(srcdir)/f/symbol.c \
 $(srcdir)/f/symbol.def \
 $(srcdir)/f/symbol.h \
 $(srcdir)/f/system.j \
 $(srcdir)/f/target.c \
 $(srcdir)/f/target.h \
 $(srcdir)/f/tconfig.j \
 $(srcdir)/f/tm.j \
 $(srcdir)/f/top.c \
 $(srcdir)/f/top.h \
 $(srcdir)/f/toplev.j \
 $(srcdir)/f/tree.j \
 $(srcdir)/f/type.c \
 $(srcdir)/f/type.h \
 $(srcdir)/f/version.c \
 $(srcdir)/f/version.h \
 $(srcdir)/f/where.c \
 $(srcdir)/f/where.h

f771$(exeext): $(P) $(F77_SRCS) $(LIBDEPS) stamp-objlist
	touch lang-f77
	cd f; $(MAKE) $(FLAGS_TO_PASS) \
	  HOST_CC="$(HOST_CC)" HOST_CFLAGS="$(HOST_CFLAGS)" HOST_CPPFLAGS="$(HOST_CPPFLAGS)" \
	  ../f771$(exeext)

#
# Build hooks:

f77.all.build: g77$(exeext)
f77.all.cross: g77-cross$(exeext)
f77.start.encap: g77$(exeext)
f77.rest.encap:

f77.info: f/g77.info
f77.dvi: f/g77.dvi

# g77 documentation.
f/g77.info: $(srcdir)/f/g77.texi $(srcdir)/f/bugs.texi \
	    $(srcdir)/f/g77install.texi $(srcdir)/f/news.texi \
	    $(srcdir)/f/intdoc.texi
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 ]; then \
	  rm -f $(srcdir)/f/g77.info-*; \
	  $(MAKEINFO) -I$(srcdir)/f -o f/g77.info $(srcdir)/f/g77.texi; \
	else true; fi

f/g77.dvi: $(srcdir)/f/g77.texi $(srcdir)/f/bugs.texi \
	    $(srcdir)/f/g77install.texi $(srcdir)/f/news.texi \
	    $(srcdir)/f/intdoc.texi
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
# `tex2dvi' was used below, but the Texinfo 3.12 one won't work properly
# with the include files from $(srcdir).  This use of TEXINPUTS may not
# be universally valid.  `$(TEX)' should be used if it gets defined in
# gcc/Makefile.in.
	if [ -f lang-f77 ]; then \
	  TEXINPUTS=$(srcdir)/f:$$TEXINPUTS tex $(srcdir)/f/g77.texi; \
	  texindex g77.??; \
	  TEXINPUTS=$(srcdir)/f:$$TEXINPUTS tex $(srcdir)/f/g77.texi; \
	  mv g77.dvi f; \
	else true; fi

# This dance is all about producing accurate documentation for g77's
# intrinsics with minimum fuss.  f/ansify appends "\n\" to C strings
# so ANSI C compilers can compile f/intdoc.h -- gcc can compile f/intdoc.in
# directly, if f/intdoc.c #include'd that, but we don't want to force
# people to install gcc just to build the documentation.  We use the
# C format for f/intdoc.in in the first place to allow a fairly "free",
# but widely known format for documentation -- basically anyone who knows
# how to write texinfo source and enclose it in C constants can handle
# it, and f/ansify allows them to not even end lines with "\n\".  So,
# essentially, the C preprocessor and compiler are used to enter the
# document snippets into a data base via name lookup, rather than duplicating
# that kind of code here.  And we use f/intdoc.c instead of straight
# texinfo in the first place so that as much information as possible
# contained in f/intrin.def can be inserted directly and reliably into
# the documentation.  That's better than replicating it, because it
# reduces the likelihood of discrepancies between the docs and the compiler
# itself, which uses f/intrin.def; in fact, many bugs in f/intrin.def have
# been found only upon reading the documentation that was automatically
# produced from it.
$(srcdir)/f/intdoc.texi: f/intdoc.c f/intdoc.in f/ansify.c f/intrin.def f/intrin.h
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 ]; then \
	  $(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) $(INCLUDES) \
	   `echo $(srcdir)/f/ansify.c | sed 's,^\./,,'` -o f/ansify; \
	  f/ansify < $(srcdir)/f/intdoc.in > f/intdoc.h0 $(srcdir)/f/intdoc.in; \
	  $(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) $(INCLUDES) -I./f \
	   `echo $(srcdir)/f/intdoc.c | sed 's,^\./,,'` -o f/intdoc; \
	  f/intdoc > $(srcdir)/f/intdoc.texi; \
	  rm f/intdoc f/ansify f/intdoc.h0; \
	else true; fi

$(srcdir)/f/BUGS: f/bugs0.texi f/bugs.texi
	cd $(srcdir)/f; $(MAKEINFO) -D BUGSONLY --no-header --no-split \
	  --no-validate -o BUGS bugs0.texi

$(srcdir)/f/INSTALL: f/install0.texi f/g77install.texi
	cd $(srcdir)/f; $(MAKEINFO) -D INSTALLONLY --no-header --no-split \
	  --no-validate -o INSTALL install0.texi

$(srcdir)/f/NEWS: f/news0.texi f/news.texi
	cd $(srcdir)/f; $(MAKEINFO) -D NEWSONLY --no-header --no-split \
	  --no-validate -o NEWS news0.texi

f77.rebuilt: f/g77.info $(srcdir)/f/BUGS $(srcdir)/f/INSTALL \
  $(srcdir)/f/NEWS 

#
# Install hooks:
# f771 is installed elsewhere as part of $(COMPILERS).

f77.install-normal:

# Install the driver program as $(target)-g77
# and also as either g77 (if native) or $(tooldir)/bin/g77.
f77.install-common:
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	-if [ -f lang-f77 -a -f f771$(exeext) ] ; then \
	  if [ -f g77-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g77-cross$(exeext) $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	  else \
	    rm -f $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) g77$(exeext) $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	    chmod a+x $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	  fi ; \
	else true; fi
	@if [ -f f77-install-ok -o -f $(srcdir)/f77-install-ok ]; then \
	  echo ''; \
	  echo 'Warning: egcs no longer installs an f77 command.'; \
	  echo '         You must do so yourself.  For more information,'; \
	  echo '         read "Distributing Binaries" in the egcs g77 docs.'; \
	  echo '         (To turn off this warning, delete the file'; \
	  echo '         f77-install-ok in the source or build directory.)'; \
	  echo ''; \
	else true; fi

# $(INSTALL_DATA) might be a relative pathname, so we can't cd into srcdir
# to do the install.  The sed rule was copied from stmp-int-hdrs.
f77.install-info: f77.info
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	if [ -f lang-f77 -a -f f/g77.info ] ; then \
	  rm -f $(infodir)/g77.info*; \
	  for f in f/g77.info*; do \
	      realfile=`echo $$f | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
	      $(INSTALL_DATA) $$f $(infodir)/$$realfile; \
	  done; \
	  chmod a-x $(infodir)/g77.info*; \
	fi
	@if [ -f lang-f77 -a -f $(srcdir)/f/g77.info ] ; then \
	  if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	    echo " install-info --info-dir=$(infodir) $(infodir)/g77.info"; \
	    install-info --info-dir=$(infodir) $(infodir)/g77.info || : ; \
	  else : ; fi; \
	else : ; fi

f77.install-man: $(srcdir)/f/g77.1
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	-if [ -f lang-f77 -a -f f771$(exeext) ] ; then \
	  if [ -f g77-cross$(exeext) ] ; then \
	    rm -f $(mandir)/$(G77_CROSS_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/f/g77.1 $(mandir)/$(G77_CROSS_NAME)$(manext); \
	    chmod a-x $(mandir)/$(G77_CROSS_NAME)$(manext); \
	  else \
	    rm -f $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	    $(INSTALL_DATA) $(srcdir)/f/g77.1 $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	    chmod a-x $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	  fi; \
	else true; fi

f77.uninstall:
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	@if [ -f lang-f77 ] ; then \
	  if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	    echo " install-info --delete --info-dir=$(infodir) $(infodir)/g77.info"; \
	    install-info --delete --info-dir=$(infodir) $(infodir)/g77.info || : ; \
	  else : ; fi; \
	else : ; fi
	-if [ -f lang-f77 ]; then \
	  rm -rf $(bindir)/$(G77_INSTALL_NAME)$(exeext); \
	  rm -rf $(bindir)/$(G77_CROSS_NAME)$(exeext); \
	  rm -rf $(mandir)/$(G77_INSTALL_NAME)$(manext); \
	  rm -rf $(mandir)/$(G77_CROSS_NAME)$(manext); \
	  rm -rf $(infodir)/g77.info*; \
	fi
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

f77.mostlyclean:
	-rm -f f/*$(objext)
	-rm -f f/fini f/stamp-str f/str-*.h f/str-*.j
	-rm -f f/intdoc f/ansify f/intdoc.h0
	-rm -f g77.aux g77.cps g77.ky g77.toc g77.vr g77.fn g77.kys \
	       g77.pg g77.tp g77.vrs g77.cp g77.fns g77.log g77.pgs g77.tps 
f77.clean:
	-rm -f g77.c g77.o g77spec.o g77version.o
f77.distclean:
	-rm -f lang-f77 f/Makefile
f77.extraclean:
f77.maintainer-clean:
	-rm -f f/g77.info* f/g77.*aux f/TAGS f/BUGS f/INSTALL f/NEWS f/intdoc.texi
#
# Stage hooks:
# The main makefile has already created stage?/f.

G77STAGESTUFF = f/*$(objext) f/fini f/stamp-str f/str-*.h f/str-*.j \
  lang-f77 g77.c g77.o g77spec.o g77version.o

f77.stage1: stage1-start
	-if [ -f lang-f77 ]; then \
	  mv -f $(G77STAGESTUFF) stage1/f; \
	fi
f77.stage2: stage2-start
	-if [ -f lang-f77 ]; then \
	  mv -f $(G77STAGESTUFF) stage2/f; \
	fi
f77.stage3: stage3-start
	-if [ -f lang-f77 ]; then \
	  mv -f $(G77STAGESTUFF) stage3/f; \
	fi
f77.stage4: stage4-start
	-if [ -f lang-f77 ]; then \
	  mv -f $(G77STAGESTUFF) stage4/f; \
	fi
#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
f77.distdir: f77.rebuilt
	case "$(LANGUAGES)" in \
	  *[fF]77*) touch lang-f77;; \
	  *) rm -f lang-f77;; \
	esac
	-if [ -f lang-f77 ]; then \
	  mkdir tmp/f; \
	  cd f; \
	  for file in *[0-9a-zA-Z+]; do \
	    $(LN_S) $$file ../tmp/f; \
	  done; \
	fi
# Top level makefile fragment for GNU Objective-C
#   Copyright (C) 1997, 1998 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#
# Extra flags to pass to recursive makes.
OBJC_FLAGS_TO_PASS = \
	"OBJC_FOR_BUILD=$(OBJC_FOR_BUILD)" \
	"OBJCFLAGS=$(OBJCFLAGS)" \
	"OBJC_FOR_TARGET=$(OBJC_FOR_TARGET)" \

# Actual names to use when installing a native compiler.
#OBJC_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`

# Actual names to use when installing a cross-compiler.
#OBJC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`

#
# Define the names for selecting Objective-C in LANGUAGES.
OBJC objc: cc1obj$(exeext) objc-runtime
OBJECTIVE-C objective-c: cc1obj$(exeext) objc-runtime

# Tell GNU make to ignore these if they exist.
.PHONY: objective-c objc ObjC

# The Objective C thread file
OBJC_THREAD_FILE=thr-$(GCC_THREAD_FILE)

# Language-specific object files for Objective C.
OBJC_OBJS = objc-parse.o objc-act.o $(C_AND_OBJC_OBJS)

cc1obj$(exeext): $(P) $(OBJC_OBJS) $(OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJC_OBJS) $(OBJS) \
		$(LIBS)

# Objective C language specific files.

objc-parse.o : $(srcdir)/objc/objc-parse.c \
   $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h \
   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/input.h \
   $(srcdir)/flags.h $(srcdir)/output.h $(srcdir)/objc/objc-act.h system.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-parse.c

$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y
	cd $(srcdir)/objc; \
	$(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c

$(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y
	sed -e "/^ifc$$/,/^end ifc$$/d" \
	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d" \
	  $(srcdir)/c-parse.in >>tmp-objc-prs.y
	$(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc/objc-parse.y

objc-act.o : $(srcdir)/objc/objc-act.c \
   $(CONFIG_H) $(TREE_H) $(RTL_H) system.h \
   $(srcdir)/c-tree.h $(srcdir)/c-lex.h $(srcdir)/toplev.h \
   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h \
   $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/c-parse.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-act.c

objc-runtime: objc-headers libobjc.a

# copy objc header files into build directory
objc-headers: stmp-fixinc
	if [ -d include ]; then true; else mkdir include; fi
	cd objc; \
	if [ -f Makefile ]; then \
	  $(MAKE) copy-headers \
	  tooldir=$(tooldir) \
	  AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
	  GCC_FOR_TARGET="../xgcc -B../" \
	  GCC_CFLAGS="$(GCC_CFLAGS)" incinstalldir=../include; \
	fi
	touch objc-headers

# Objective C runtime library specific files.

OBJC_O = objc/hash.o objc/sarray.o \
	objc/class.o objc/sendmsg.o \
	objc/init.o objc/archive.o \
	objc/encoding.o objc/selector.o \
	objc/objects.o objc/misc.o \
	objc/NXConstStr.o objc/Object.o \
	objc/Protocol.o objc/nil_method.o \
	objc/thr.o objc/linking.o \
	objc/$(OBJC_THREAD_FILE).o

objc/hash.o: $(srcdir)/objc/hash.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/hash.c -o $@
objc/sarray.o: $(srcdir)/objc/sarray.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/sarray.c -o $@
objc/class.o: $(srcdir)/objc/class.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/class.c -o $@
objc/sendmsg.o: $(srcdir)/objc/sendmsg.c $(GCC_PASSES) objc/runtime-info.h
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -Iobjc \
	-c $(srcdir)/objc/sendmsg.c -o $@
objc/init.o: $(srcdir)/objc/init.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/init.c -o $@
objc/archive.o: $(srcdir)/objc/archive.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/archive.c -o $@
objc/encoding.o: $(srcdir)/objc/encoding.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/encoding.c -o $@
objc/selector.o: $(srcdir)/objc/selector.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/selector.c -o $@
objc/objects.o: $(srcdir)/objc/objects.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/objects.c -o $@
objc/misc.o: $(srcdir)/objc/misc.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/misc.c -o $@
objc/NXConstStr.o: $(srcdir)/objc/NXConstStr.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/NXConstStr.m -o $@
objc/Object.o: $(srcdir)/objc/Object.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/Object.m -o $@
objc/Protocol.o: $(srcdir)/objc/Protocol.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/Protocol.m -o $@
objc/thr.o: $(srcdir)/objc/thr.h $(srcdir)/objc/thr.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/thr.c -o $@
objc/$(OBJC_THREAD_FILE).o: $(srcdir)/objc/$(OBJC_THREAD_FILE).c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/$(OBJC_THREAD_FILE).c -o $@
objc/nil_method.o: $(srcdir)/objc/nil_method.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/nil_method.c -o $@
objc/linking.o: $(srcdir)/objc/linking.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-fgnu-runtime -c $(srcdir)/objc/linking.m -o $@

objc/libobjc_entry.o: $(srcdir)/objc/libobjc_entry.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/libobjc_entry.c -o $@

$(OBJC_O): $(GCC_PASSES) cc1obj$(exeext)

# Build the Objective C runtime library.
libobjc.a: cc1obj$(exeext) specs stmp-int-hdrs libgcc2.ready \
 $(USE_COLLECT2) $(EXTRA_PARTS) objc/runtime-info.h $(OBJC_O)
	-rm -f libobjc.a
	$(AR) $(AR_FLAGS) libobjc.a $(OBJC_O)
	-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi

libobjc_s.a: libobjc.a
	mv libobjc.a libobjc_s.a

# Create a relocatable DLL
libobjc.dll: libobjc_s.a objc/libobjc_entry.o
	$(GCC_FOR_TARGET) -mdll -Wl,--base-file -Wl,libobjc.base \
		-o libobjc.dll libobjc_s.a \
		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def \
		--base-file libobjc.base --output-exp libobjc.exp
	$(GCC_FOR_TARGET) -mdll -Wl,--base-file libobjc.base libobjc.exp \
		-o libobjc.dll libobjc_s.a \
		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def \
		--base-file libobjc.base --output-exp libobjc.exp
	$(GCC_FOR_TARGET) libobjc.exp -mdll \
		-o libobjc.dll libobjc_s.a \
		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def \
		--output-lib libobjc.a

# Platform generated information needed by ObjC runtime
objc/runtime-info.h: cc1obj$(exeext)
	echo "" > tmp-runtime
	echo "/* This file is automatically generated */" >$@
	./cc1obj -print-objc-runtime-info tmp-runtime >>$@
	rm -f tmp-runtime
#
# Build hooks:

objc.all.build:
objc.all.cross:
objc.start.encap:
objc.rest.encap:

objc.info:
objc.dvi:

#
# Install hooks:
# cc1obj is installed elsewhere as part of $(COMPILERS).

objc.install-normal: installdirs
	-if [ -f libobjc.a ] ; then \
	  rm -f $(libsubdir)/libobjc.a; \
	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \
	  chmod a-x $(libsubdir)/libobjc.a; \
	else true; fi
	-if [ -f libobjc_s.a ] ; then \
	  rm -f $(libsubdir)/libobjc_s.a; \
	  $(INSTALL_DATA) libobjc_s.a $(libsubdir)/libobjc_s.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libobjc_s.a); else true; fi; \
	  chmod a-x $(libsubdir)/libobjc_s.a; \
	else true; fi
	-if [ -f libobjc.dll ] ; then \
	  rm -f $(bindir)/libobjc.dll; \
	  $(INSTALL_DATA) libobjc.dll $(bindir)/libobjc.dll; \
	else true; fi

objc.install-common:

objc.install-info:

objc.install-man:

objc.uninstall:
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
objc.mostlyclean:
	-rm -f tmp-objc-prs.y
	-rm -f objc/*$(objext) objc/xforward objc/fflags
	-rm -f objc/runtime-info.h
	-rm -f libobjc.a libobjc_s.a libobjc.dll
	-rm -f libobjc.base libobjc.exp
objc.clean: objc.mostlyclean
	-rm -rf objc-headers
objc.distclean:
	-rm -f objc/Makefile objc/Make-host objc/Make-target
	-rm -f objc/config.status objc/config.cache
	-rm -f objc-parse.output
objc.extraclean:
objc.maintainer-clean:
	-rm -f objc/objc-parse.y
	-rm -f objc/objc-parse.c objc/objc-parse.output

#
# Stage hooks:

objc.stage1: stage1-start
	-mv objc/*$(objext) stage1/objc
	-mv cc1obj$(exeext) stage1
	-mv libobjc.a stage1
objc.stage2: stage2-start
	-mv objc/*$(objext) stage2/objc
	-mv cc1obj$(exeext) stage2
	-mv libobjc.a stage2
objc.stage3: stage3-start
	-mv objc/*$(objext) stage3/objc
	-mv cc1obj$(exeext) stage3
	-mv libobjc.a stage3
objc.stage4: stage4-start
	-mv objc/*$(objext) stage4/objc
	-mv cc1obj$(exeext) stage4
	-mv libobjc.a stage4

#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
# ??? Note that this should be fixed once the Makefile is fixed to do
# the build in the inner directory.
objc.distdir: $(srcdir)/objc/objc-parse.c
	mkdir tmp/objc
#	cd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c
	cd objc; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \
	done
